import os
import logging
from datetime import time, timedelta
from typing import Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
    Application
)
from pytz import timezone
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –í—å–µ—Ç–Ω–∞–º–∞
local_tz = timezone("Asia/Ho_Chi_Minh")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
tasks = {
    "garden_morning": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (—É—Ç—Ä–æ)", "hour": 9, "minute": 0},
    "garden_evening": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (–≤–µ—á–µ—Ä)", "hour": 20, "minute": 0},
    "spray_plants": {"name": "–†–∞—Å—Ç–µ–Ω–∏—è —Ö–æ—Ç—è—Ç –≤–æ–¥–∏—á–∫–∏ - —Å–ø—Ä–µ–π —Ü–≤–µ—Ç–æ–≤! :)", "hour": 13, "minute": 0},
    "dishwasher_unload": {"name": "–†–∞–∑–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 10, "minute": 0},
    "dishwasher_load": {"name": "–ó–∞–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 20, "minute": 0},
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ –∑–∞–¥–∞—á–∏
user_chats: Dict[int, dict] = {}
task_status: Dict[int, Dict[str, Dict[str, int]]] = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_chats[chat_id] = {"tasks": tasks}
    task_status[chat_id] = {key: {"done": 0, "skips": 0} for key in tasks}

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üòä –ë—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
async def task_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in task_status:
        await update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    for task_key, task in tasks.items():
        status = task_status[chat_id].get(task_key, {"done": 0, "skips": 0})
        is_done = status["done"] == 1
        status_text = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_done else "‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        keyboard = []

        if is_done:
            keyboard = [
                [InlineKeyboardButton("üîÅ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"undo|{task_key}")]
            ]
        else:
            if task_key in ["garden_morning", "garden_evening"]:
                keyboard = [
                    [InlineKeyboardButton("üåß –ë—ã—Ñ –¥–æ–∂–¥—è—Ñüåß", callback_data=f"done_rain|{task_key}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–ª–∏–≤ :)", callback_data=f"done_user|{task_key}")],
                    [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
                ]
            elif task_key == "spray_plants":
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
                    [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
                ]
            elif task_key in ["dishwasher_unload", "dishwasher_load"]:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
                    [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
                ]
            else:
                keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_user|{task_key}")]]

        header = "\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ <3\n" if is_done else ""

        await update.message.reply_text(
            text=f"üìå {task['name']}{header}–°—Ç–∞—Ç—É—Å: {status_text}, –æ—Ç–ª–æ–∂–µ–Ω–æ: {status['skips']} —Ä–∞–∑(–∞)",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    task_key = job_data['task_key']
    task = tasks[task_key]

    if chat_id not in task_status:
        task_status[chat_id] = {}
    if task_key not in task_status[chat_id]:
        task_status[chat_id][task_key] = {"done": 0, "skips": 0}
    task_status[chat_id][task_key]["done"] = 0

    if task_key in ["garden_morning", "garden_evening"]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üåß –ë—ã—Ñ –¥–æ–∂–¥—è—Ñüåß", callback_data=f"done_rain|{task_key}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–ª–∏–≤ :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ])
    elif task_key == "spray_plants":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ])
    elif task_key in ["dishwasher_unload", "dishwasher_load"]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("üò¥ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ])
    else:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_user|{task_key}")]
        ])

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task['name']}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data_parts = query.data.split('|')
    action = data_parts[0]
    task_key = data_parts[1]
    task = tasks[task_key]
    chat_id = query.message.chat.id

    if chat_id not in task_status:
        task_status[chat_id] = {}
    if task_key not in task_status[chat_id]:
        task_status[chat_id][task_key] = {"done": 0, "skips": 0}

    if action == "done_rain":
        task_status[chat_id][task_key]["done"] = 1
        await query.edit_message_text("üåß –î–æ–∂–¥—å –ø–æ–ª–∏–≤ :)")
    elif action == "done_user":
        task_status[chat_id][task_key]["done"] = 1
        await query.edit_message_text("‚úÖ –ü–∞—Å–∏–±–∞))))")
    elif action == "remind_30":
        task_status[chat_id][task_key]["skips"] += 1
        await query.edit_message_text("üîÅ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç")
        context.job_queue.run_once(
            send_reminder,
            when=timedelta(minutes=30),
            data={"chat_id": chat_id, "task_key": task_key}
        )
    elif action == "undo":
        task_status[chat_id][task_key]["done"] = 0
        await query.edit_message_text(f"‚ùå –ó–∞–¥–∞—á–∞ '{task['name']}' —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
async def schedule_jobs(application: Application):
    job_queue: JobQueue = application.job_queue

    for chat_id in user_chats:
        for task_key, task in tasks.items():
            job_queue.run_daily(
                send_reminder,
                time=time(task["hour"], task["minute"], tzinfo=local_tz),
                days=(0, 1, 2, 3, 4, 5, 6),
                data={"chat_id": chat_id, "task_key": task_key}
            )

if __name__ == '__main__':
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set in environment variables")

    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", task_list))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.post_init = schedule_jobs

    application.run_polling()