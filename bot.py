import os
import json
import logging
from datetime import time, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Application,
)
from pytz import timezone
from dotenv import load_dotenv

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
DATA_FILE = "data.json"
TIMEZONE = timezone("Asia/Ho_Chi_Minh")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–¥–∞—á–∏
TASKS = {
    "garden_morning": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (—É—Ç—Ä–æ)", "hour": 9, "minute": 0},
    "garden_evening": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (–≤–µ—á–µ—Ä)", "hour": 20, "minute": 0},
    "spray_plants": {"name": "–†–∞—Å—Ç–µ–Ω–∏—è —Ö–æ—Ç—è—Ç –≤–æ–¥–∏—á–∫–∏ - —Å–ø—Ä–µ–π —Ü–≤–µ—Ç–æ–≤! :)", "hour": 13, "minute": 0},
    "dishwasher_unload": {"name": "–†–∞–∑–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 10, "minute": 0},
    "dishwasher_load": {"name": "–ó–∞–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 20, "minute": 0},
}

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"chats": {}}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–¥–∞—á
def get_keyboard(task_key: str) -> InlineKeyboardMarkup:
    if task_key in ["garden_morning", "garden_evening"]:
        buttons = [
            [InlineKeyboardButton("üåß –ë—ã—Ñ –¥–æ–∂–¥—è—Ñ", callback_data=f"done_rain|{task_key}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–ª–∏–≤ :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("üò¢ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç", callback_data=f"remind_30|{task_key}")],
        ]
    else:
        buttons = [
            [InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("üò¢ –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç", callback_data=f"remind_30|{task_key}")],
        ]
    return InlineKeyboardMarkup(buttons)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
async def schedule_jobs(application: Application, chat_id: int):
    for task_key, task in TASKS.items():
        application.job_queue.run_daily(
            send_reminder,
            time=time(task["hour"], task["minute"], tzinfo=TIMEZONE),
            days=(0, 1, 2, 3, 4, 5, 6),
            data={"chat_id": chat_id, "task_key": task_key}
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = update.effective_chat.id
    if str(chat_id) not in data["chats"]:
        data["chats"][str(chat_id)] = {"active": True}
        save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üòä –ë—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.")
    await schedule_jobs(context.application, chat_id)

# –ö–æ–º–∞–Ω–¥–∞ /list
async def task_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(task["name"], callback_data=f"view|{key}")]
        for key, task in TASKS.items()
    ]
    text = "\n".join([f"üìå {task['name']}" for task in TASKS.values()])
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{text}", reply_markup=InlineKeyboardMarkup(keyboard))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    task_key = job_data['task_key']
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {TASKS[task_key]['name']}",
        reply_markup=get_keyboard(task_key)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, task_key = query.data.split('|')

    if action == "view":
        await query.message.reply_text(
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {TASKS[task_key]['name']}",
            reply_markup=get_keyboard(task_key)
        )
    elif action == "done_rain":
        await query.edit_message_text("üåß –î–æ–∂–¥—å –ø–æ–ª–∏–≤ :)")
    elif action == "done_user":
        await query.edit_message_text("‚úÖ –ü–∞—Å–∏–±–∞))))")
    elif action == "remind_30":
        await query.edit_message_text("üîÅ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç")
        context.job_queue.run_once(
            send_reminder,
            when=timedelta(minutes=30),
            data={"chat_id": query.message.chat.id, "task_key": task_key}
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", task_list))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()
