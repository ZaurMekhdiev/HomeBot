import os
import logging
from datetime import time, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
    Application
)
from pytz import timezone
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –í—å–µ—Ç–Ω–∞–º–∞
local_tz = timezone("Asia/Ho_Chi_Minh")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
TASKS = {
    "garden_morning": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (—É—Ç—Ä–æ)", "hour": 9, "minute": 0},
    "garden_evening": {"name": "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã –≤ —Å–∞–¥—É (–≤–µ—á–µ—Ä)", "hour": 20, "minute": 0},
    "spray_plants": {"name": "–†–∞—Å—Ç–µ–Ω–∏—è —Ö–æ—Ç—è—Ç –≤–æ–¥–∏—á–∫–∏ - —Å–ø—Ä–µ–π —Ü–≤–µ—Ç–æ–≤! :)", "hour": 13, "minute": 0},
    "dishwasher_unload": {"name": "–†–∞–∑–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 10, "minute": 0},
    "dishwasher_load": {"name": "–ó–∞–≥—Ä—É–∑–∏ –ø–æ—Å—É–¥–æ–º–æ–π–∫—É", "hour": 20, "minute": 0},
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π chat_id –≥—Ä—É–ø–ø—ã
group_chat_id = None

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

def get_keyboard(task_key: str) -> InlineKeyboardMarkup:
    if task_key in ["garden_morning", "garden_evening"]:
        buttons = [
            [InlineKeyboardButton("\U0001F327 –ë—ã—Ñ –¥–æ–∂–¥—è—Ñ\U0001F327", callback_data=f"done_rain|{task_key}")],
            [InlineKeyboardButton("\u2705 –Ø –ø–æ–ª–∏–≤ :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("\U0001F62D –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ]
    elif task_key == "spray_plants":
        buttons = [
            [InlineKeyboardButton("\u2705 –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("\U0001F62D –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ]
    elif task_key in ["dishwasher_unload", "dishwasher_load"]:
        buttons = [
            [InlineKeyboardButton("\u2705 –Ø —Å–¥–µ–ª—è–ª—å :)", callback_data=f"done_user|{task_key}")],
            [InlineKeyboardButton("\U0001F62D –û—Ç—Å—Ç–∞–Ω—å –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–ª–∑", callback_data=f"remind_30|{task_key}")],
        ]
    else:
        buttons = [[InlineKeyboardButton("\u2705 –ì–æ—Ç–æ–≤–æ", callback_data=f"done_user|{task_key}")]]
    return InlineKeyboardMarkup(buttons)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
async def schedule_group_jobs(application: Application):
    if group_chat_id is None:
        logging.warning("–ì—Ä—É–ø–ø–æ–≤–æ–π chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    for task_key, task in TASKS.items():
        application.job_queue.run_daily(
            send_reminder,
            time=time(task["hour"], task["minute"], tzinfo=local_tz),
            days=(0, 1, 2, 3, 4, 5, 6),
            data={"chat_id": group_chat_id, "task_key": task_key}
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global group_chat_id
    group_chat_id = update.effective_chat.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üòä –ë—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≥—Ä—É–ø–ø–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö."
    )
    await schedule_group_jobs(context.application)

# –ö–æ–º–∞–Ω–¥–∞ /list
async def task_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = []
    keyboard = []
    for key, task in TASKS.items():
        lines.append(f"üìå {task['name']}")
        keyboard.append([InlineKeyboardButton(task["name"], callback_data=f"view|{key}")])
    await update.message.reply_text(
        text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n" + "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    task_key = job_data['task_key']

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {TASKS[task_key]['name']}",
        reply_markup=get_keyboard(task_key)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, task_key = query.data.split('|')

    if action == "view":
        await query.message.reply_text(
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {TASKS[task_key]['name']}",
            reply_markup=get_keyboard(task_key)
        )
    elif action == "done_rain":
        await query.edit_message_text("üåß –î–æ–∂–¥—å –ø–æ–ª–∏–≤ :)")
    elif action == "done_user":
        await query.edit_message_text("‚úÖ –ü–∞—Å–∏–±–∞))))")
    elif action == "remind_30":
        await query.edit_message_text("üîÅ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç")
        context.job_queue.run_once(
            send_reminder,
            when=timedelta(minutes=30),
            data={"chat_id": query.message.chat.id, "task_key": task_key}
        )

# –ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async def post_init(application: Application):
    if group_chat_id:
        await schedule_group_jobs(application)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set in environment variables")

    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", task_list))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.post_init = post_init

    application.run_polling()
