"""
handlers/commands.py ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞

–§—É–Ω–∫—Ü–∏–∏:
- /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- /list ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
- /list_daily ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
- /add_notify ‚Äî –Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
- /debug ‚Äî –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

from telegram import Update
from telegram.ext import ContextTypes

user_pending_tasks = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üòä –ò—Å–ø–æ–ª—å–∑—É–π /add_notify —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

async def task_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from database.db import get_user_tasks

    chat_id = update.effective_chat.id
    tasks = get_user_tasks(chat_id)

    if not tasks:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    msg = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ" if task["is_completed"] else "‚ùå"
        msg += f"{status} {task['task_name']} ‚Äî {task['remind_date']} {task['remind_time']}\n"

    await update.message.reply_text(msg)


async def list_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"DEBUG: {context.user_data}")

async def add_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("–ß–µ –Ω–∞–¥?))))))) (–≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)")
    context.user_data['awaiting_task_name'] = True
